## Basic notions of Vectors
1) Physics: Vector: arrow pointing spaces, direction+length, 2-3dimen., can set everywhere

2) CS: 2 or more dimen. lists(rows and colums)

3) Math: can be anything-1) and 2), O: addition, multiply
        sum of two vectors=from T of 1st and end at H of 2nd
                          =CS-way also O used for addition, + same positions
        multiply= streching by copying in a specific proport.
                = CS- way: multiply the constant to each factor

- x-y axis: tail starts from 0(Origin) <-> Physics
            CS-way can be used-> express vectors'form
- 3dimen: CS-way has 3rows

- Scaling: stretching/squishing/reversing the direct.
  Scalars: 2, 1/3, -1.8.. etc.

## forming vectors

import numpy as np
# import numpy function. has an speciality in calcu. vect.and rows&colums.

# ===== forming vectors =====
v = np.array([3., 4.])
# v = (3, 4)-> the reason of putt' dots: 
dots-> not int, float-> float is safer for norm/angle calcu 
                        + prevent err. occur' when int->float.

w = np.array([1., -2.])
# same with 26-28

# ===== forming vector norm and unit vector =====
v_norm = np.linalg.norm(v)
# ||v||2 = sqrt(3^2 + 4^2) = 5.
c.f.) Euclid norm: length of vectors
        L1 norm (Manhattan norm): the distance as the sum of absolute values of coordinates, 
                                like walking along grid lines.
                                ∥v∥1​=∑∣xi​∣
        L2 norm (Euclidean norm): the straight-line distance, 
                                computed as the square root of the sum of squared coordinates.
                                ∥v∥2​=∑xi2​
        L∞ norm (Maximum norm): the largest absolute coordinate, 
                                showing the farthest extent along any axis.
                                ∥v∥∞​=max∣xi​∣

v_unit = v / v_norm if v_norm != 0 else v
# unit vector: v̂ = v / ||v||, *except.-> denominator=0
norm of unit vector: always 1
b/c) 
v̂ = v / ||v||
||v̂||   = sqrt( Σ (xi / ||v||)^2 )
        = sqrt( Σ xi^2 ) / c
        = ||v|| / ||v|| = 1


# ===== forming dot & angle =====
dot_vw = float(np.dot(v, w))
# dot: suggest that in respect of w = v->w projection,
        to which direction(the length of shadow=||v||cosθ) + to what extent(multiply ||w||) 
        = work(in Physics)
        => v·w = ||v||||w||cosθ-> sign is differ depend' on cosθ-> O guess the range of angle
                = v1*w1 + v2*w2 + ...
                = ∑vi​wi​
                b/c) For any triangle with sides a,b,c: c^2=a^2+b^2−2abcosθ
                ∣a−b∣^2=∣a∣^2+∣b∣^2−2∣a∣∣b∣cosθ (apply that to vec.) -(1)
                ∣a−b∣^2=1∑n​(ai​−bi​)^2=∑ai^2​+∑bi^2​−2∑ai​bi -(2)
                in apply (2) to (1),
                −2∣a∣∣b∣cosθ=−2∑ai​bi
                => ​∣a∣∣b∣cosθ=1∑n​ai​bi​
                

cos_theta = dot_vw / (np.linalg.norm(v) * np.linalg.norm(w))
# see the 62

cos_theta = np.clip(cos_theta, -1.0, 1.0)
# Floating-point error: com. store num. in binary approx.
                        -> results can be slightly off (e.g., 1.0000000002 instead of 1.0). 
                        -> This can push values like cosθ just outside the valid range [-1,1].
                        -> err. occur when use arccos
Clipping: forc' a value -> a safe range by cutt' it off. 

theta_deg = np.degrees(np.arccos(cos_theta))
# θ = arccos(cosθ) (radian) → degrees() (turn into degree)
e.g) arccos(0.5)=1.04719(π/3​)-> degrees(arccos(0.5))=60∘

# ===== forming distance b/w two vec. =====
dist_vw = np.linalg.norm(v - w)
# Euclidean distance: straight line distance=||v - w||, point-to-point distance formula-> O apply to n-dimen.

# ===== result output =====
print(f"v = {v}, ||v|| = {v_norm:.3f}, v_unit = {v_unit}")
#f: f-string (formatted string literal), if use {}-> real value
e.g.) name = "Alice"
        print(f"Hello {name}!") = the outcome is "Hello Alice!"
.3f: output float up to 3 decimal places
e.g.) num = 3.141592
        print(f"num = {num:.3f}") = the outcome is "num = 3.141"

print(f"w = {w}")
# see the 84-89

print(f"dot(v, w) = {dot_vw:.3f}")
# see the 84-89

print(f"angle(v, w) = {theta_deg:.3f} degrees")
# angle(v,w): the angle b/w v and w

print(f"dist(v, w) = {dist_vw:.3f}")
# see the 84-89


- 특징:
  · 직각이면 0
  · 양수 → 같은 방향
  · 음수 → 반대 방향
- 예시:
  (2, 3)·(4, -1) = 2*4 + 3*(-1) = 8 - 3 = 5

---

2) 외적 (Cross Product)
- 정의: 두 벡터가 만드는 평면에 수직인 벡터
- 수식(3차원):
  a × b = | i    j    k  |
          | a1  a2  a3 |
          | b1  b2  b3 |
- 크기: |a||b|sinθ
- 방향: 오른손 법칙
- 의미: 평행사변형 넓이
- 예시:
  (1, 0, 0) × (0, 1, 0) = (0, 0, 1)

---

3) 기하적 의미
- 내적 → 투영(projection), 두 벡터 사이 각도 계산
- 외적 → 법선 벡터(normal vector), 면적 계산

---

4) 좌표계와 단위벡터
- 2D: (x, y)
- 3D: (x, y, z)
- 단위벡터:
  i = (1, 0, 0)
  j = (0, 1, 0)
  k = (0, 0, 1)
- 일반 벡터: v = x*i + y*j + z*k

---

5) 응용
- 물리: Work = F·d (내적)
- 공학: Torque = r×F (외적)
- 그래픽스: Normal vector 계산 (외적)
- 데이터 과학: Cosine similarity (내적)








            
